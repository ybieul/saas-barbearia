import { prisma } from '../lib/prisma';

const EVOLUTION_API_URL = process.env.EVOLUTION_API_URL;
const EVOLUTION_API_KEY = process.env.EVOLUTION_API_KEY;

interface EvolutionInstance {
  instance: {
    instanceName: string;
    instanceId?: string;
    status?: string;
  };
  status?: string;
}

export async function cleanupOrphanedInstances() {
  console.log('[GARBAGE-COLLECTOR] üßπ Iniciando limpeza di√°ria de inst√¢ncias √≥rf√£s...');
  
  try {
    // Verificar configura√ß√£o da Evolution API
    if (!EVOLUTION_API_URL || !EVOLUTION_API_KEY) {
      console.error('[GARBAGE-COLLECTOR] ‚ùå Configura√ß√£o da Evolution API n√£o encontrada');
      return;
    }

    console.log(`[GARBAGE-COLLECTOR] üîó Conectando com Evolution API: ${EVOLUTION_API_URL}`);

    // 1. Buscar inst√¢ncias v√°lidas do banco de dados
    const tenantsWithInstance = await prisma.tenant.findMany({
      where: { 
        whatsapp_instance_name: { not: null } 
      },
      select: { 
        id: true,
        businessName: true,
        whatsapp_instance_name: true 
      }
    });

    const validInstances = new Set(
      tenantsWithInstance
        .filter(t => t.whatsapp_instance_name)
        .map(t => t.whatsapp_instance_name!)
    );

    console.log(`[GARBAGE-COLLECTOR] üìä Encontradas ${validInstances.size} inst√¢ncias v√°lidas no banco de dados:`);
    tenantsWithInstance.forEach(tenant => {
      console.log(`[GARBAGE-COLLECTOR]   - ${tenant.whatsapp_instance_name} (${tenant.businessName})`);
    });

    // 2. Buscar todas as inst√¢ncias da Evolution API
    const response = await fetch(`${EVOLUTION_API_URL}/instance/all`, {
      method: 'GET',
      headers: {
        'apikey': EVOLUTION_API_KEY,
        'Accept': 'application/json'
      },
      signal: AbortSignal.timeout(30000) // 30 segundos timeout
    });

    if (!response.ok) {
      throw new Error(`Evolution API retornou ${response.status}: ${response.statusText}`);
    }

    const allEvolutionInstances: EvolutionInstance[] = await response.json();
    console.log(`[GARBAGE-COLLECTOR] üîç Encontradas ${allEvolutionInstances.length} inst√¢ncias na Evolution API.`);

    if (allEvolutionInstances.length === 0) {
      console.log('[GARBAGE-COLLECTOR] ‚úÖ Nenhuma inst√¢ncia encontrada na Evolution API. Sistema limpo.');
      return;
    }

    // 3. Comparar e deletar inst√¢ncias √≥rf√£s
    let orphanCount = 0;
    let deletedCount = 0;
    let errorCount = 0;

    for (const evolutionInstance of allEvolutionInstances) {
      const instanceName = evolutionInstance.instance?.instanceName;
      
      if (!instanceName) {
        console.warn('[GARBAGE-COLLECTOR] ‚ö†Ô∏è Inst√¢ncia sem nome encontrada, pulando...');
        continue;
      }

      if (!validInstances.has(instanceName)) {
        orphanCount++;
        console.log(`[GARBAGE-COLLECTOR] üóëÔ∏è Inst√¢ncia √≥rf√£ encontrada: "${instanceName}". Removendo...`);
        
        try {
          const deleteResponse = await fetch(`${EVOLUTION_API_URL}/instance/delete/${instanceName}`, {
            method: 'DELETE',
            headers: {
              'apikey': EVOLUTION_API_KEY,
              'Accept': 'application/json'
            },
            signal: AbortSignal.timeout(15000) // 15 segundos timeout
          });

          if (deleteResponse.ok) {
            deletedCount++;
            console.log(`[GARBAGE-COLLECTOR] ‚úÖ Inst√¢ncia "${instanceName}" removida com sucesso.`);
          } else {
            errorCount++;
            console.error(`[GARBAGE-COLLECTOR] ‚ùå Falha ao remover inst√¢ncia "${instanceName}": ${deleteResponse.status} - ${deleteResponse.statusText}`);
          }
        } catch (deleteError: any) {
          errorCount++;
          console.error(`[GARBAGE-COLLECTOR] ‚ùå Erro ao remover inst√¢ncia "${instanceName}":`, deleteError.message);
        }

        // Aguardar um pouco entre deletions para n√£o sobrecarregar a API
        await new Promise(resolve => setTimeout(resolve, 1000));
      } else {
        console.log(`[GARBAGE-COLLECTOR] ‚úÖ Inst√¢ncia "${instanceName}" √© v√°lida - mantendo.`);
      }
    }

    // 4. Relat√≥rio final
    console.log('\n[GARBAGE-COLLECTOR] üìã RELAT√ìRIO FINAL:');
    console.log(`[GARBAGE-COLLECTOR]   - Inst√¢ncias v√°lidas no banco: ${validInstances.size}`);
    console.log(`[GARBAGE-COLLECTOR]   - Inst√¢ncias na Evolution API: ${allEvolutionInstances.length}`);
    console.log(`[GARBAGE-COLLECTOR]   - Inst√¢ncias √≥rf√£s encontradas: ${orphanCount}`);
    console.log(`[GARBAGE-COLLECTOR]   - Inst√¢ncias deletadas com sucesso: ${deletedCount}`);
    console.log(`[GARBAGE-COLLECTOR]   - Erros durante dele√ß√£o: ${errorCount}`);

    if (orphanCount === 0) {
      console.log('[GARBAGE-COLLECTOR] üéâ Nenhuma inst√¢ncia √≥rf√£ encontrada. Sistema limpo!');
    } else if (deletedCount === orphanCount) {
      console.log('[GARBAGE-COLLECTOR] üéâ Todas as inst√¢ncias √≥rf√£s foram removidas com sucesso!');
    } else if (deletedCount > 0) {
      console.log(`[GARBAGE-COLLECTOR] ‚ö†Ô∏è Limpeza parcial: ${deletedCount}/${orphanCount} inst√¢ncias √≥rf√£s removidas.`);
    } else {
      console.log('[GARBAGE-COLLECTOR] ‚ùå Nenhuma inst√¢ncia √≥rf√£ p√¥de ser removida.');
    }

  } catch (error: any) {
    console.error('[GARBAGE-COLLECTOR] ‚ùå ERRO CR√çTICO durante limpeza de inst√¢ncias √≥rf√£s:', error.message);
    console.error('[GARBAGE-COLLECTOR] Stack trace:', error.stack);
  }

  console.log('[GARBAGE-COLLECTOR] üèÅ Limpeza di√°ria finalizada.\n');
}
