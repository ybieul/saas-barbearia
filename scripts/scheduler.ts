import cron from 'node-cron';
import { sendWhatsappReminders } from './whatsapp-reminders-cron';
import { cleanupOrphanedInstances } from './whatsapp-instance-gc';
import { runPreExpireCron } from './subscription-preexpire-cron';
import { runExpireCron } from './subscription-expirer-cron';

console.log('‚úÖ Agendador (Scheduler) de tarefas foi iniciado com sucesso.');
console.log('üïê Executando a cada 5 minutos para verifica√ß√£o de lembretes...');
console.log('üßπ Executando √†s 03:00 diariamente para limpeza de inst√¢ncias √≥rf√£s...');
console.log('‚è∞ Executando pr√©-expira√ß√£o √†s 00:05 (emails 3d / 1d).');
console.log('‚è∞ Executando expira√ß√£o (grace) √†s 00:10.');
console.log('üåç Timezone: America/Sao_Paulo');

// Validar se a express√£o cron est√° correta
if (!cron.validate('*/5 * * * *')) {
  console.error('‚ùå Express√£o cron inv√°lida!');
  process.exit(1);
}

// Agenda a tarefa para ser executada a cada 5 minutos
cron.schedule('*/5 * * * *', async () => {
  const now = new Date().toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo' });
  console.log(`\n[${now}] === üöÄ INICIANDO TAREFA AGENDADA: Verifica√ß√£o de Lembretes ===`);

  try {
    await sendWhatsappReminders(); 
    console.log(`[${now}] === ‚úÖ TAREFA AGENDADA CONCLU√çDA COM SUCESSO ===\n`);
  } catch (error) {
    console.error(`[${now}] === ‚ùå ERRO NA EXECU√á√ÉO DA TAREFA AGENDADA ===`);
    console.error('Stack trace:', error);
    console.log(`[${now}] === üîÑ CONTINUANDO AGENDAMENTO (pr√≥xima execu√ß√£o em 5 minutos) ===\n`);
  }
}, {
  timezone: 'America/Sao_Paulo'
});

// NOVA TAREFA DI√ÅRIA: Limpeza de Inst√¢ncias √ìrf√£s (√†s 3h da manh√£)
cron.schedule('0 3 * * *', async () => {
  const now = new Date().toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo' });
  console.log(`\n[${now}] === üßπ INICIANDO TAREFA DI√ÅRIA: Limpeza de Inst√¢ncias √ìrf√£s ===`);
  
  try {
    await cleanupOrphanedInstances();
    console.log(`[${now}] === ‚úÖ TAREFA DE LIMPEZA DI√ÅRIA CONCLU√çDA COM SUCESSO ===\n`);
  } catch (error) {
    console.error(`[${now}] === ‚ùå ERRO NA TAREFA DE LIMPEZA DI√ÅRIA ===`);
    console.error('Stack trace:', error);
    console.log(`[${now}] === üîÑ CONTINUANDO AGENDAMENTO (pr√≥xima execu√ß√£o amanh√£ √†s 03:00) ===\n`);
  }
}, {
  timezone: 'America/Sao_Paulo'
});

// PR√â-EXPIRA√á√ÉO (00:05 BR)
cron.schedule('5 0 * * *', async () => {
  const now = new Date().toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo' });
  console.log(`\n[${now}] === üîî INICIANDO PR√â-EXPIRA√á√ÉO (3d/1d) ===`);
  try {
    await runPreExpireCron();
    console.log(`[${now}] === ‚úÖ PR√â-EXPIRA√á√ÉO CONCLU√çDA ===\n`);
  } catch (e) {
    console.error(`[${now}] === ‚ùå ERRO NA PR√â-EXPIRA√á√ÉO ===`, e);
  }
}, { timezone: 'America/Sao_Paulo' });

// EXPIRA√á√ÉO (GRACE CHECK) (00:10 BR)
cron.schedule('10 0 * * *', async () => {
  const now = new Date().toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo' });
  console.log(`\n[${now}] === ‚è±Ô∏è INICIANDO EXPIRA√á√ÉO (GRACE) ===`);
  try {
    await runExpireCron();
    console.log(`[${now}] === ‚úÖ EXPIRA√á√ÉO CONCLU√çDA ===\n`);
  } catch (e) {
    console.error(`[${now}] === ‚ùå ERRO NA EXPIRA√á√ÉO ===`, e);
  }
}, { timezone: 'America/Sao_Paulo' });

// Graceful shutdown
process.on('SIGINT', () => {
  console.log('\n‚èπÔ∏è  Recebido sinal de interrup√ß√£o. Encerrando agendador...');
  process.exit(0);
});

process.on('SIGTERM', () => {
  console.log('\n‚èπÔ∏è  Recebido sinal de termina√ß√£o. Encerrando agendador...');
  process.exit(0);
});
