// This is your Prisma schema file for MySQL/phpMyAdmin (Hostinger)
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ============================================
// SaaS STRUCTURE: TENANT (NOSSOS CLIENTES) + END USERS (CLIENTES FINAIS)
// ============================================

// Tabela principal: NOSSOS CLIENTES (donos de barbearias)
model Tenant {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String   // Nome do proprietário
  password  String
  phone     String?
  avatar    String?  @db.Text
  role      UserRole @default(OWNER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Business information (dados da barbearia)
  businessName      String?   // Nome da barbearia
  businessAddress   String?   @db.Text
  businessPhone     String?
  businessLogo      String?   @db.LongText
  businessCnpj      String?   // CNPJ da empresa
  businessInstagram String?   // URL do Instagram
  
  // Subscription and billing (assinaturas e cobrança)
  businessPlan         String    @default("FREE") // FREE, BASIC, PREMIUM (nível)
  planCycle            PlanCycle @default(MONTHLY) // Ciclo de cobrança
  subscriptionStart    DateTime  @default(now())
  subscriptionEnd      DateTime?
  isActive             Boolean   @default(false)
  kirvanoCustomerId    String?   @unique // ID do cliente na Kirvano
  kirvanoSubscriptionId String?  @unique // ID da assinatura na Kirvano
  // Auditoria de emails de assinatura / origem de expiração
  lastSubscriptionEmailType SubscriptionEmailType? // Controle para evitar emails duplicados
  webhookExpiredProcessed   Boolean @default(false) // True se expiração/cancelamento veio via webhook
  
  // WhatsApp Evolution API
  whatsapp_instance_name String? @unique // Nome da instância da Evolution API
  
  // Configurações da barbearia
  businessConfig    Json?     // Configurações personalizadas
  // Custos fixos mensais do estabelecimento (lista de objetos JSON: [{ id, name, amount }])
  fixedCosts       Json?
  
  // Password Reset (redefinição de senha)
  passwordResetToken   String?   // Token para redefinição de senha
  passwordResetExpires DateTime? // Data de expiração do token
  
  // Relations - TODOS os dados pertencem ao tenant
  clients             EndUser[]
  appointments        Appointment[]
  services            Service[]
  professionals       Professional[]
  reports             Report[]
  whatsappLogs        WhatsAppLog[]
  automationSettings  AutomationSetting[]
  promotionTemplates  PromotionTemplate[]
  servicePackages     ServicePackage[]
  financialRecords    FinancialRecord[]
  workingHours        WorkingHours[]

  // Link de avaliação do Google (para mensagem pós-atendimento)
  googleReviewLink String? @db.Text
  // Delay configurável para envio de feedback (minutos após completedAt)
  feedbackDelayMinutes Int @default(45)

  @@map("tenants")
}

// Enum de ciclo de plano
enum PlanCycle {
  MONTHLY
  ANNUAL
}

// Tabela: CLIENTES FINAIS (clientes das barbearias)
model EndUser {
  id        String   @id @default(cuid())
  name      String
  email     String?
  phone     String
  birthday  DateTime?
  notes     String?  @db.Text
  address   String?  @db.Text
  cpf       String?  // CPF do cliente
  isActive  Boolean  @default(true)
  // Indica se é um cliente de balcão (walk-in / temporário)
  isWalkIn  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Profissional que criou o cliente (para visibilidade inicial entre colaboradores)
  createdByProfessionalId String?
  createdByProfessional   Professional? @relation(fields: [createdByProfessionalId], references: [id], onDelete: SetNull)

  // Dados do cliente
  preferences Json?   // Preferências do cliente (JSON)
  lastVisit   DateTime?
  totalVisits Int      @default(0)
  totalSpent  Decimal  @default(0) @db.Decimal(10,2)

  // Relations
  tenantId     String
  tenant       Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  appointments Appointment[]

  // Índices para performance
  @@index([tenantId])
  @@index([tenantId, phone])
  @@index([tenantId, email])
  @@index([tenantId, createdByProfessionalId])
  @@map("end_users")
}

model Professional {
  id        String   @id @default(cuid())
  name      String
  email     String?  @unique
  phone     String?
  specialty String?  @db.Text
  avatar    String?  @db.LongText
  salary    Decimal? @db.Decimal(10,2)
  commission Decimal? @db.Decimal(5,2) // Porcentagem de comissão
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Credenciais de acesso (multi-usuário colaborador)
  password String?
  role     String  @default("COLLABORATOR") // Difere de OWNER (Tenant)

  // Configurações do profissional
  workingDays   Json?    // Dias da semana que trabalha
  workingHours  Json?    // Horários de trabalho
  
  // Relations
  tenantId           String
  tenant             Tenant                @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  appointments       Appointment[]
  services           Service[]
  schedules          ProfessionalSchedule[]
  scheduleExceptions ScheduleException[]

  @@index([tenantId])
  @@map("professionals")
}

model Service {
  id          String   @id @default(cuid())
  name        String
  description String?  @db.Text
  price       Decimal  @db.Decimal(10,2)
  duration    Int      // em minutos
  category    String?
  image       String?  @db.LongText // URL da imagem
  isActive    Boolean  @default(true)
  // Controle de visibilidade na página pública de agendamento
  isVisibleOnPublicPage Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Configurações do serviço
  maxAdvanceBooking Int?     // Dias máximos para agendamento antecipado
  minAdvanceBooking Int?     // Horas mínimas para agendamento
  
  // Relations
  tenantId          String
  tenant            Tenant                    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  // ✅ Relacionamento many-to-many com agendamentos
  appointments      Appointment[]
  professionals     Professional[]
  servicePackages   ServicePackageService[]

  @@index([tenantId])
  @@index([tenantId, category])
  @@map("services")
}

model ServicePackage {
  id          String   @id @default(cuid())
  name        String
  description String?  @db.Text
  totalPrice  Decimal  @db.Decimal(10,2)
  discount    Decimal  @default(0) @db.Decimal(5,2)
  validDays   Int?     // Dias de validade do pacote
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  tenantId String
  tenant   Tenant                    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  services ServicePackageService[]

  @@index([tenantId])
  @@map("service_packages")
}

model ServicePackageService {
  id               String         @id @default(cuid())
  servicePackageId String
  serviceId        String
  quantity         Int            @default(1)

  // Relations
  servicePackage   ServicePackage @relation(fields: [servicePackageId], references: [id], onDelete: Cascade)
  service          Service        @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@unique([servicePackageId, serviceId])
  @@map("service_package_services")
}

model Appointment {
  id            String            @id @default(cuid())
  dateTime      DateTime
  duration      Int               // em minutos (duração total de todos os serviços)
  totalPrice    Decimal           @db.Decimal(10,2)
  status        AppointmentStatus @default(SCHEDULED)
  paymentMethod PaymentMethod?
  paymentStatus PaymentStatus     @default(PENDING)
  notes         String?           @db.Text
  reminderSent  Boolean           @default(false)
  // Flag para indicar se mensagem de feedback foi enviada
  feedbackSent  Boolean           @default(false)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  // Campos adicionais para controle
  cancelledAt   DateTime?
  cancelReason  String?          @db.Text
  completedAt   DateTime?
  
  // Relations
  tenantId       String
  endUserId      String
  professionalId String?

  tenant       Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  endUser      EndUser       @relation(fields: [endUserId], references: [id], onDelete: Cascade)
  professional Professional? @relation(fields: [professionalId], references: [id], onDelete: SetNull)
  
  // ✅ NOVO: Relacionamento many-to-many com serviços
  services     Service[]
  reminders    AppointmentReminder[]

  @@index([tenantId])
  @@index([tenantId, dateTime])
  @@index([tenantId, endUserId])
  @@index([tenantId, professionalId])
  @@map("appointments")
}

model FinancialRecord {
  id          String            @id @default(cuid())
  type        FinancialType
  amount      Decimal           @db.Decimal(10,2)
  description String            @db.Text
  category    String?
  date        DateTime          @default(now())
  
  // Dados do pagamento
  paymentMethod PaymentMethod?
  reference     String?         // Referência externa (ex: ID do agendamento)
  
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  // Relations
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([tenantId, date])
  @@index([tenantId, type])
  @@map("financial_records")
}

model Report {
  id        String     @id @default(cuid())
  type      ReportType
  title     String
  data      Json       // Dados do relatório em JSON
  filters   Json?      // Filtros aplicados
  createdAt DateTime   @default(now())

  // Relations
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([tenantId, type])
  @@map("reports")
}

model WhatsAppLog {
  id        String          @id @default(cuid())
  to        String
  message   String          @db.Text
  type      WhatsAppType
  status    WhatsAppStatus  @default(PENDING)
  sentAt    DateTime?
  createdAt DateTime        @default(now())
  
  // Dados adicionais
  errorMessage String?      @db.Text
  attempts     Int          @default(0)

  // Relations
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([tenantId, status])
  @@map("whatsapp_logs")
}

model PromotionTemplate {
  id        String   @id @default(cuid())
  name      String
  title     String
  message   String   @db.Text
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Configurações da promoção
  targetAudience Json?  // Público alvo
  scheduling     Json?  // Agendamento automático
  
  // Relations
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@map("promotion_templates")
}

model WorkingHours {
  id        String   @id @default(cuid())
  dayOfWeek String   // monday, tuesday, wednesday, etc.
  startTime String   // HH:MM format
  endTime   String   // HH:MM format
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, dayOfWeek])
  @@index([tenantId])
  @@map("working_hours")
}

// ============================================
// GERENCIAMENTO DE HORÁRIOS DOS PROFISSIONAIS
// ============================================

// Horários padrão semanais dos profissionais
model ProfessionalSchedule {
  id            String   @id @default(cuid())
  professionalId String  @map("professional_id")
  dayOfWeek     Int      @map("day_of_week") // 0=Domingo, 1=Segunda, 2=Terça, 3=Quarta, 4=Quinta, 5=Sexta, 6=Sábado
  startTime     String   @map("start_time") // Formato HH:MM:SS
  endTime       String   @map("end_time")   // Formato HH:MM:SS
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  professional Professional @relation(fields: [professionalId], references: [id], onDelete: Cascade)
  recurringBreaks RecurringBreak[]

  @@unique([professionalId, dayOfWeek])
  @@index([professionalId])
  @@map("professional_schedules")
}

// Intervalos recorrentes (como almoço) no horário de trabalho
model RecurringBreak {
  id         String   @id @default(cuid())
  scheduleId String   @map("schedule_id")
  startTime  String   @map("start_time") // Formato HH:MM
  endTime    String   @map("end_time")   // Formato HH:MM
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  // Relations
  schedule ProfessionalSchedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)

  @@index([scheduleId])
  @@map("recurring_breaks")
}

// Bloqueios e exceções pontuais na agenda
model ScheduleException {
  id            String              @id @default(cuid())
  professionalId String             @map("professional_id")
  startDatetime DateTime           @map("start_datetime")
  endDatetime   DateTime           @map("end_datetime")
  reason        String?            @db.VarChar(500)
  type          ScheduleExceptionType @default(BLOCK)
  createdAt     DateTime           @default(now()) @map("created_at")
  updatedAt     DateTime           @updatedAt @map("updated_at")

  // Relations
  professional Professional @relation(fields: [professionalId], references: [id], onDelete: Cascade)

  @@index([professionalId])
  @@index([startDatetime, endDatetime])
  @@map("schedule_exceptions")
}

// ============================================
// ENUMS
// ============================================

enum ScheduleExceptionType {
  BLOCK   // Bloqueio pontual (ex: almoço, intervalo)
  DAY_OFF // Folga/Férias
}

enum UserRole {
  OWNER        // Dono da barbearia
  ADMIN        // Administrador
  PROFESSIONAL // Profissional
  MANAGER      // Gerente
}

enum AppointmentStatus {
  SCHEDULED  // Agendado
  CONFIRMED  // Confirmado
  COMPLETED  // Finalizado
  CANCELLED  // Cancelado
  NO_SHOW    // Não compareceu
  IN_PROGRESS // Em andamento
}

enum PaymentMethod {
  CASH     // Dinheiro
  CARD     // Cartão
  PIX      // PIX
  TRANSFER // Transferência
  DEBIT    // Débito
  CREDIT   // Crédito
}

enum PaymentStatus {
  PENDING   // Pendente
  PAID      // Pago
  PARTIAL   // Parcial
  REFUNDED  // Estornado
  CANCELLED // Cancelado
}

enum FinancialType {
  INCOME    // Receita
  EXPENSE   // Despesa
  TRANSFER  // Transferência
}

enum ReportType {
  FINANCIAL     // Financeiro
  CLIENTS       // Clientes
  SERVICES      // Serviços
  APPOINTMENTS  // Agendamentos
  PROFESSIONALS // Profissionais
  CUSTOM        // Personalizado
}

enum WhatsAppType {
  CONFIRMATION  // Confirmação
  REMINDER_24H  // Lembrete 24h
  REMINDER_2H   // Lembrete 2h
  REACTIVATION  // Reativação
  PROMOTION     // Promoção
  CUSTOM        // Personalizada
  FEEDBACK      // Pedido de avaliação pós-atendimento
}

enum WhatsAppStatus {
  PENDING   // Pendente
  SENT      // Enviada
  DELIVERED // Entregue
  READ      // Lida
  FAILED    // Falhou
}

// ============================================
// AUDITORIA DE ASSINATURA / EMAILS
// ============================================
enum SubscriptionEmailType {
  WELCOME          // Email de boas-vindas
  PRE_EXPIRE_3D    // Aviso 3 dias antes
  PRE_EXPIRE_1D    // Aviso 1 dia antes
  CANCELED         // Assinatura cancelada (webhook)
  EXPIRED_WEBHOOK  // Expirada diretamente via webhook
  EXPIRED_GRACE    // Expirada via cron após período de graça
}

// ============================================
// WHATSAPP AUTOMATION MODELS
// ============================================

model AutomationSetting {
  id              String   @id @default(cuid())
  establishmentId String   // FK para Tenant (establishment)
  automationType  String   // 'confirmation', 'reminder_24h', 'reminder_2h', 'reactivation'
  isEnabled       Boolean  @default(true)
  messageTemplate String?  @db.Text
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  tenant Tenant @relation(fields: [establishmentId], references: [id], onDelete: Cascade)

  @@unique([establishmentId, automationType])
  @@index([establishmentId])
  @@map("automation_settings")
}

model AppointmentReminder {
  id            String   @id @default(cuid())
  appointmentId String   // FK para Appointment
  reminderType  String   // 'confirmation', 'reminder_24h', 'reminder_2h', etc.
  sentAt        DateTime @default(now())
  createdAt     DateTime @default(now())

  // Relations
  appointment Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)

  @@index([appointmentId])
  @@index([reminderType])
  @@map("appointment_reminders")
}
