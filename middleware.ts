import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'
import { getToken } from 'next-auth/jwt'
import { prisma } from './lib/prisma'
import { getBrazilNow } from './lib/timezone'

export async function middleware(request: NextRequest) {
  const { pathname } = request.nextUrl

  // Rotas p√∫blicas que n√£o precisam de autentica√ß√£o
  const publicRoutes = ['/login', '/register', '/']
  
  // Se √© uma rota p√∫blica, permitir acesso
  if (publicRoutes.includes(pathname)) {
    return NextResponse.next()
  }

  // Para rotas do dashboard, verificar autentica√ß√£o e assinatura
  if (pathname.startsWith('/dashboard')) {
    const secret = process.env.NEXTAUTH_SECRET

    // --- IN√çCIO DA CORRE√á√ÉO ---
    
    // Log para depura√ß√£o. No EasyPanel, verifique os logs do servi√ßo para ver esta sa√≠da.
    console.log("üîç Verificando NEXTAUTH_SECRET no middleware:", secret ? "‚úÖ Encontrada" : "‚ùå N√ÉO ENCONTRADA!")

    // Verifica√ß√£o de seguran√ßa: se a chave secreta n√£o estiver configurada no servidor,
    // a autentica√ß√£o √© imposs√≠vel e deve falhar com um erro claro.
    if (!secret) {
      console.error("üí• Erro Cr√≠tico: A vari√°vel de ambiente NEXTAUTH_SECRET n√£o est√° configurada no servidor.")
      // Retorna um erro 500 para indicar uma falha de configura√ß√£o do servidor
      return new Response("Erro de configura√ß√£o de autentica√ß√£o interna.", { status: 500 })
    }
    
    // Garante que a chave secreta seja passada para a fun√ß√£o getToken
    const sessionToken = await getToken({ req: request, secret })
    
    // --- FIM DA CORRE√á√ÉO ---
    
    // 1. Verificar se h√° token v√°lido
    if (!sessionToken) {
      console.log("üîí Sem token de sess√£o v√°lido, redirecionando para login")
      return NextResponse.redirect(new URL('/login', request.url))
    }

    try {
      // 2. Obter o tenantId do token do NextAuth
      const tenantId = sessionToken.tenantId as string

      if (!tenantId) {
        return NextResponse.redirect(new URL('/login', request.url))
      }

      // 3. Buscar informa√ß√µes da assinatura do tenant
      const tenant = await prisma.tenant.findUnique({
        where: { id: tenantId },
        select: { 
          isActive: true, 
          subscriptionEnd: true 
        }
      })

      if (!tenant) {
        return NextResponse.redirect(new URL('/login', request.url))
      }

      // 4. Verificar se a assinatura est√° ativa
      const now = getBrazilNow()
      
      // Converte explicitamente o valor para um booleano. 
      // Isso funciona para: true, 1, false, 0, null, undefined.
      const isActiveAsBoolean = Boolean(tenant?.isActive)
      
      // Debug: Log para verificar convers√£o de TINYINT(1) -> Boolean
      if (process.env.NODE_ENV === 'development') {
        console.log(`üîç DEBUG: tenant.isActive = ${tenant.isActive} (tipo: ${typeof tenant.isActive}) ‚Üí Boolean = ${isActiveAsBoolean}`)
      }
      
      const isSubscriptionActive = isActiveAsBoolean && 
        (tenant.subscriptionEnd ? tenant.subscriptionEnd > now : true)
      
      // 5. Verificar se j√° est√° na p√°gina de assinatura
      const isOnBillingPage = pathname.startsWith('/dashboard/assinatura')

      // 6. PAYWALL: Se assinatura inativa e n√£o est√° na p√°gina de assinatura
      if (!isSubscriptionActive && !isOnBillingPage) {
        console.log(`üîí PAYWALL: Redirecionando usu√°rio ${tenantId} para /dashboard/assinatura`)
        return NextResponse.redirect(new URL('/dashboard/assinatura', request.url))
      }

    } catch (error) {
      console.error('Erro no middleware de verifica√ß√£o:', error)
      return NextResponse.redirect(new URL('/login', request.url))
    }
  }

  return NextResponse.next()
}

export const config = {
  matcher: [
    /*
     * Match all dashboard routes specifically for paywall protection
     * Exclude API routes, static files, and public assets
     */
    '/dashboard/:path*',
  ],
}
