"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const node_cron_1 = __importDefault(require("node-cron"));
const whatsapp_reminders_cron_1 = require("./whatsapp-reminders-cron");
const whatsapp_instance_gc_1 = require("./whatsapp-instance-gc");
const subscription_preexpire_cron_1 = require("./subscription-preexpire-cron");
const subscription_expirer_cron_1 = require("./subscription-expirer-cron");
const check_trial_expirations_1 = require("./check-trial-expirations");
const send_trial_reminders_1 = require("./send-trial-reminders");
console.log('‚úÖ Agendador (Scheduler) de tarefas foi iniciado com sucesso.');
console.log('üïê Executando a cada 5 minutos para verifica√ß√£o de lembretes...');
console.log('üßπ Executando √†s 03:00 diariamente para limpeza de inst√¢ncias √≥rf√£s...');
console.log('‚è∞ Executando pr√©-expira√ß√£o √†s 00:05 (emails 3d / 1d).');
console.log('‚è∞ Executando expira√ß√£o (grace) √†s 00:10.');
console.log('‚è∞ Executando verifica√ß√£o de trials √†s 00:02 (desativa trials vencidos).');
console.log('üîî Executando lembretes de trial √†s 09:00 (dia 13, dia 15, dia 17).');
console.log('üåç Timezone: America/Sao_Paulo');
// Validar se a express√£o cron est√° correta
if (!node_cron_1.default.validate('*/5 * * * *')) {
    console.error('‚ùå Express√£o cron inv√°lida!');
    process.exit(1);
}
// Agenda a tarefa para ser executada a cada 5 minutos
node_cron_1.default.schedule('*/5 * * * *', () => __awaiter(void 0, void 0, void 0, function* () {
    const now = new Date().toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo' });
    console.log(`\n[${now}] === üöÄ INICIANDO TAREFA AGENDADA: Verifica√ß√£o de Lembretes ===`);
    try {
        yield (0, whatsapp_reminders_cron_1.sendWhatsappReminders)();
        console.log(`[${now}] === ‚úÖ TAREFA AGENDADA CONCLU√çDA COM SUCESSO ===\n`);
    }
    catch (error) {
        console.error(`[${now}] === ‚ùå ERRO NA EXECU√á√ÉO DA TAREFA AGENDADA ===`);
        console.error('Stack trace:', error);
        console.log(`[${now}] === üîÑ CONTINUANDO AGENDAMENTO (pr√≥xima execu√ß√£o em 5 minutos) ===\n`);
    }
}), {
    timezone: 'America/Sao_Paulo'
});
// NOVA TAREFA DI√ÅRIA: Limpeza de Inst√¢ncias √ìrf√£s (√†s 3h da manh√£)
node_cron_1.default.schedule('0 3 * * *', () => __awaiter(void 0, void 0, void 0, function* () {
    const now = new Date().toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo' });
    console.log(`\n[${now}] === üßπ INICIANDO TAREFA DI√ÅRIA: Limpeza de Inst√¢ncias √ìrf√£s ===`);
    try {
        yield (0, whatsapp_instance_gc_1.cleanupOrphanedInstances)();
        console.log(`[${now}] === ‚úÖ TAREFA DE LIMPEZA DI√ÅRIA CONCLU√çDA COM SUCESSO ===\n`);
    }
    catch (error) {
        console.error(`[${now}] === ‚ùå ERRO NA TAREFA DE LIMPEZA DI√ÅRIA ===`);
        console.error('Stack trace:', error);
        console.log(`[${now}] === üîÑ CONTINUANDO AGENDAMENTO (pr√≥xima execu√ß√£o amanh√£ √†s 03:00) ===\n`);
    }
}), {
    timezone: 'America/Sao_Paulo'
});
// PR√â-EXPIRA√á√ÉO (00:05 BR)
node_cron_1.default.schedule('5 0 * * *', () => __awaiter(void 0, void 0, void 0, function* () {
    const now = new Date().toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo' });
    console.log(`\n[${now}] === üîî INICIANDO PR√â-EXPIRA√á√ÉO (3d/1d) ===`);
    try {
        yield (0, subscription_preexpire_cron_1.runPreExpireCron)();
        console.log(`[${now}] === ‚úÖ PR√â-EXPIRA√á√ÉO CONCLU√çDA ===\n`);
    }
    catch (e) {
        console.error(`[${now}] === ‚ùå ERRO NA PR√â-EXPIRA√á√ÉO ===`, e);
    }
}), { timezone: 'America/Sao_Paulo' });
// EXPIRA√á√ÉO (GRACE CHECK) (00:10 BR)
node_cron_1.default.schedule('10 0 * * *', () => __awaiter(void 0, void 0, void 0, function* () {
    const now = new Date().toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo' });
    console.log(`\n[${now}] === ‚è±Ô∏è INICIANDO EXPIRA√á√ÉO (GRACE) ===`);
    try {
        yield (0, subscription_expirer_cron_1.runExpireCron)();
        console.log(`[${now}] === ‚úÖ EXPIRA√á√ÉO CONCLU√çDA ===\n`);
    }
    catch (e) {
        console.error(`[${now}] === ‚ùå ERRO NA EXPIRA√á√ÉO ===`, e);
    }
}), { timezone: 'America/Sao_Paulo' });
// EXPIRA√á√ÉO DE TRIALS (00:02 BR)
node_cron_1.default.schedule('2 0 * * *', () => __awaiter(void 0, void 0, void 0, function* () {
    const now = new Date().toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo' });
    console.log(`\n[${now}] === ‚è±Ô∏è INICIANDO VERIFICA√á√ÉO DE TRIALS EXPIRADOS ===`);
    try {
        yield (0, check_trial_expirations_1.runCheckTrialExpirations)();
        console.log(`[${now}] === ‚úÖ VERIFICA√á√ÉO DE TRIALS CONCLU√çDA ===\n`);
    }
    catch (e) {
        console.error(`[${now}] === ‚ùå ERRO NA VERIFICA√á√ÉO DE TRIALS ===`, e);
    }
}), { timezone: 'America/Sao_Paulo' });
// LEMBRETES DE TRIAL (09:00 BR) - dia 13, dia 15 e dia 17
node_cron_1.default.schedule('0 9 * * *', () => __awaiter(void 0, void 0, void 0, function* () {
    const now = new Date().toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo' });
    console.log(`\n[${now}] === üîî INICIANDO ENVIO DE LEMBRETES DE TRIAL ===`);
    try {
        yield (0, send_trial_reminders_1.runSendTrialReminders)();
        console.log(`[${now}] === ‚úÖ LEMBRETES DE TRIAL ENVIADOS ===\n`);
    }
    catch (e) {
        console.error(`[${now}] === ‚ùå ERRO NO ENVIO DE LEMBRETES DE TRIAL ===`, e);
    }
}), { timezone: 'America/Sao_Paulo' });
// Graceful shutdown
process.on('SIGINT', () => {
    console.log('\n‚èπÔ∏è  Recebido sinal de interrup√ß√£o. Encerrando agendador...');
    process.exit(0);
});
process.on('SIGTERM', () => {
    console.log('\n‚èπÔ∏è  Recebido sinal de termina√ß√£o. Encerrando agendador...');
    process.exit(0);
});
