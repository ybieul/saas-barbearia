#!/usr/bin/env node

/**
 * üöÄ TESTE FINAL - Sistema de Agendamento
 * 
 * Para testar no seu servidor VPS:
 * node test-final.js SEU-TENANT-ID-OU-EMAIL https://seu-dominio.com
 * 
 * Para testar local (sem dados):
 * node test-final.js teste-local
 */

const https = require('https');
const http = require('http');

function makeRequest(url) {
  return new Promise((resolve, reject) => {
    const protocol = url.startsWith('https:') ? https : http;
    
    const req = protocol.get(url, (res) => {
      let data = '';
      
      res.on('data', (chunk) => {
        data += chunk;
      });
      
      res.on('end', () => {
        try {
          const jsonData = JSON.parse(data);
          resolve({
            status: res.statusCode,
            success: res.statusCode >= 200 && res.statusCode < 300,
            data: jsonData
          });
        } catch (error) {
          resolve({
            status: res.statusCode,
            success: false,
            error: data
          });
        }
      });
    });
    
    req.on('error', (error) => {
      reject(error);
    });
    
    req.setTimeout(15000, () => {
      req.abort();
      reject(new Error('Timeout - verifique se o servidor est√° rodando'));
    });
  });
}

async function testSystem() {
  const tenantId = process.argv[2];
  const serverUrl = process.argv[3] || 'http://localhost:3001';
  
  if (!tenantId) {
    console.log('‚ùå USO:');
    console.log('   Local:     node test-final.js teste-local');
    console.log('   Produ√ß√£o:  node test-final.js SEU-TENANT-ID https://seu-dominio.com');
    console.log('');
    console.log('üí° DICAS:');
    console.log('   - Use ID do tenant, email ou slug do neg√≥cio');
    console.log('   - Para produ√ß√£o, sempre inclua https://');
    process.exit(1);
  }
  
  console.log('üéØ TESTE FINAL - Sistema de Agendamento');
  console.log('=' .repeat(50));
  console.log(`üè™ Tenant: ${tenantId}`);
  console.log(`üåê Servidor: ${serverUrl}`);
  console.log('=' .repeat(50));
  
  const tests = [
    {
      name: 'üìã 1. Dados do Neg√≥cio',
      url: `${serverUrl}/api/public/business/${tenantId}`,
      critical: true
    },
    {
      name: '‚öôÔ∏è 2. Servi√ßos Dispon√≠veis', 
      url: `${serverUrl}/api/public/business/${tenantId}/services`,
      critical: true
    },
    {
      name: 'üë®‚Äçüíº 3. Profissionais',
      url: `${serverUrl}/api/public/business/${tenantId}/professionals`,
      critical: true
    },
    {
      name: 'üïê 4. Hor√°rios de Funcionamento',
      url: `${serverUrl}/api/public/business/${tenantId}/working-hours`,
      critical: true
    },
    {
      name: 'üìÖ 5. Disponibilidade (Hoje)',
      url: `${serverUrl}/api/public/business/${tenantId}/availability?date=2025-07-30&serviceDuration=30`,
      critical: true
    },
    {
      name: 'üîç 6. Busca de Cliente',
      url: `${serverUrl}/api/public/clients/search?phone=11999999999&businessSlug=${tenantId}`,
      critical: false
    }
  ];

  let criticalErrors = 0;
  let totalTests = 0;
  let passedTests = 0;
  
  for (const test of tests) {
    totalTests++;
    console.log(`\n${test.name}`);
    console.log(`üîó ${test.url}`);
    
    try {
      const result = await makeRequest(test.url);
      
      if (result.success) {
        console.log(`‚úÖ Status: ${result.status} - OK`);
        
        if (result.data && typeof result.data === 'object') {
          if (Array.isArray(result.data)) {
            console.log(`üìä Retornou: ${result.data.length} item(s)`);
          } else {
            console.log(`üìä Dados: ${Object.keys(result.data).join(', ')}`);
          }
        }
        
        passedTests++;
      } else {
        console.log(`‚ùå Status: ${result.status} - FALHA`);
        if (result.error) {
          console.log(`üö® Erro: ${result.error.substring(0, 200)}...`);
        }
        
        if (test.critical) {
          criticalErrors++;
        }
      }
      
    } catch (error) {
      console.log(`üí• Erro de conex√£o: ${error.message}`);
      if (test.critical) {
        criticalErrors++;
      }
    }
  }
  
  console.log('\n' + '=' .repeat(50));
  console.log('üìä RESULTADO FINAL');
  console.log('=' .repeat(50));
  console.log(`‚úÖ Testes passaram: ${passedTests}/${totalTests}`);
  console.log(`‚ùå Erros cr√≠ticos: ${criticalErrors}`);
  
  if (criticalErrors === 0 && passedTests >= 4) {
    console.log('\nüéâ SISTEMA FUNCIONANDO!');
    console.log('‚úÖ APIs cr√≠ticas respondendo corretamente');
    console.log('‚úÖ Pronto para agendamentos');
    console.log(`\nüåê Acesse: ${serverUrl}/agendamento/${tenantId}`);
  } else if (criticalErrors > 0) {
    console.log('\n‚ö†Ô∏è PROBLEMAS CR√çTICOS ENCONTRADOS');
    console.log('‚ùå Verifique se:');
    console.log('  - Servidor est√° rodando');
    console.log('  - Banco de dados conectado');
    console.log('  - Tenant ID est√° correto');
    console.log('  - Tenant est√° ativo');
  } else {
    console.log('\n‚ö†Ô∏è SISTEMA PARCIALMENTE FUNCIONAL');
    console.log('‚úÖ APIs b√°sicas funcionando');
    console.log('‚ö†Ô∏è Algumas funcionalidades podem ter problemas');
  }
  
  console.log('\nüìù Pr√≥ximos passos:');
  console.log('1. Testar interface web de agendamento');
  console.log('2. Verificar se hor√°rios ocupados aparecem');
  console.log('3. Realizar agendamento completo');
  console.log('4. Confirmar formata√ß√£o de pre√ßos em R$');
}

testSystem().catch(console.error);
