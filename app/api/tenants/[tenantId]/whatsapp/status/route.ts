import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/prisma'
import { authenticate, AuthError } from '@/lib/auth'

// Fun√ß√£o utilit√°ria para gerar nome da inst√¢ncia baseado no nome do estabelecimento
function generateInstanceName(businessName: string | null, tenantId: string): string {
  if (!businessName) {
    // Fallback para o formato antigo se n√£o houver businessName
    return `tenant_${tenantId}`
  }
  
  // Limpar o nome do estabelecimento para usar como nome da inst√¢ncia
  const cleanBusinessName = businessName
    .toLowerCase() // converter para min√∫sculas
    .trim() // remover espa√ßos
    .replace(/[^a-z0-9]/g, '_') // substituir caracteres especiais por underscore
    .replace(/_+/g, '_') // m√∫ltiplos underscores viram um s√≥
    .replace(/^_|_$/g, '') // remover underscores do in√≠cio e fim
    .substring(0, 20) // limitar a 20 caracteres
  
  return `${cleanBusinessName}_${tenantId}`
}

// Autentica√ß√£o centralizada removendo duplica√ß√£o de verifyToken

export async function GET(
  request: NextRequest,
  { params }: { params: { tenantId: string } }
) {
  try {
    if (process.env.NODE_ENV === 'development') {
      console.log("=== ROTA GET STATUS INICIADA ===")
    }
    
    // Autentica e garante acesso ao tenant
    const user = authenticate(request, params.tenantId)
    if (process.env.NODE_ENV === 'development') {
      console.log('‚úÖ [STATUS] Autentica√ß√£o e autoriza√ß√£o conclu√≠das para usu√°rio', user.userId)
    }

    const { tenantId } = params
    
    // Buscar dados do tenant para gerar nome da inst√¢ncia correto
    const tenant = await prisma.tenant.findFirst({
      where: {
        id: tenantId
      },
      select: {
        id: true,
        businessName: true,
        whatsapp_instance_name: true
      }
    })

    if (!tenant) {
      return NextResponse.json(
        { error: 'Tenant n√£o encontrado' },
        { status: 404 }
      )
    }
    
    // Obter instanceName do query param ou gerar baseado no businessName
    const url = new URL(request.url)
    const queryInstanceName = url.searchParams.get('instanceName')
    const instanceName = queryInstanceName || generateInstanceName(tenant.businessName, tenantId)
    
    console.log(`üè¢ [STATUS] Verificando inst√¢ncia: "${instanceName}"`)
    console.log(`üè¢ [STATUS] Baseado em: "${tenant.businessName}" + "${tenantId}"`)
    

    // Verificar vari√°veis de ambiente da Evolution API
    const evolutionURL = process.env.EVOLUTION_API_URL
    const evolutionKey = process.env.EVOLUTION_API_KEY

    if (!evolutionURL || !evolutionKey) {
      return NextResponse.json(
        { error: 'Configura√ß√£o da Evolution API n√£o encontrada' },
        { status: 500 }
      )
    }

    // Verificar status da inst√¢ncia na Evolution API
    const statusUrl = `${evolutionURL}/instance/connectionState/${instanceName}`
    
    console.log(`üîç [API] Verificando status da inst√¢ncia: ${instanceName}`)

    const response = await fetch(statusUrl, {
      method: 'GET',
      headers: {
        'apikey': evolutionKey,
        'Accept': 'application/json'
      },
      signal: AbortSignal.timeout(10000)
    })

    // Tratar diferentes c√≥digos de status HTTP
    if (!response.ok) {
      console.log(`‚ö†Ô∏è [API] Evolution API retornou status: ${response.status}`)
      
      // 404 significa que a inst√¢ncia n√£o existe ou est√° desconectada - isso √© V√ÅLIDO
      if (response.status === 404) {
        console.log('üì¥ [API] Inst√¢ncia n√£o encontrada (404) - interpretando como desconectada')
        return NextResponse.json({
          connected: false,
          instanceName: instanceName,
          status: 'close',
          error: 'Inst√¢ncia n√£o encontrada - WhatsApp desconectado',
          data: {
            tenantId: tenantId,
            instanceName: instanceName,
            lastCheck: new Date().toISOString()
          }
        })
      }
      
      // Para outros erros (500, 401, etc.), retornar erro real
      console.error(`‚ùå [API] Erro inesperado na Evolution API: ${response.status}`)
      const errorText = await response.text().catch(() => 'Erro desconhecido')
      return NextResponse.json(
        { 
          connected: false,
          instanceName: instanceName,
          error: `Erro na Evolution API: ${response.status} - ${errorText}`
        },
        { status: 500 }
      )
    }

    // Se chegou aqui, a resposta foi bem-sucedida (200)
    const data = await response.json()
    console.log('üìã [API] Status da inst√¢ncia obtido com sucesso:', data)
    
    const isConnected = data.instance?.state === 'open' || data.state === 'open'
    
    // Se estiver conectado, atualizar o banco com o instanceName
    if (isConnected) {
      try {
        await prisma.tenant.update({
          where: { id: tenantId },
          data: { 
            whatsapp_instance_name: instanceName 
          }
        })
        console.log(`‚úÖ [API] WhatsApp conectado para tenant ${tenantId} - instanceName salvo no banco`)
      } catch (dbError) {
        console.error('‚ùå [API] Erro ao atualizar banco:', dbError)
      }
    }

    return NextResponse.json({
      connected: isConnected,
      instanceName: instanceName,
      status: data.instance?.state || data.state,
      error: !isConnected ? `Status: ${data.instance?.state || data.state}` : undefined,
      data: {
        tenantId: tenantId,
        instanceName: instanceName,
        lastCheck: new Date().toISOString()
      }
    })

  } catch (error: any) {
    const dev = process.env.NODE_ENV === 'development'
    if (error instanceof AuthError) {
      return NextResponse.json({ error: error.message, code: error.code }, { status: error.status })
    }
    console.error('‚ùå [STATUS] Erro geral:', error?.message || error)
    // Timeout ou falha de rede: considerar desconectado
    if (error?.name === 'TimeoutError' || error?.message?.includes('timeout') || error?.message?.includes('fetch')) {
      let fallbackInstanceName = `tenant_${params.tenantId}`
      try {
        const fallbackTenant = await prisma.tenant.findFirst({ where: { id: params.tenantId }, select: { businessName: true } })
        if (fallbackTenant) {
          fallbackInstanceName = generateInstanceName(fallbackTenant.businessName, params.tenantId)
        }
      } catch {}
      return NextResponse.json({
        connected: false,
        instanceName: fallbackInstanceName,
        status: 'close',
        error: 'Timeout na comunica√ß√£o com Evolution API - interpretado como desconectado',
        data: { tenantId: params.tenantId, instanceName: fallbackInstanceName, lastCheck: new Date().toISOString() }
      })
    }
    return NextResponse.json({ connected: false, error: 'Erro interno ao verificar status da conex√£o WhatsApp', details: dev ? error?.message : undefined }, { status: 500 })
  }
}
