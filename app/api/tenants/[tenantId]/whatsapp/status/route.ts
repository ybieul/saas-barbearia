import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/prisma'
import jwt from 'jsonwebtoken'

// Fun√ß√£o utilit√°ria para gerar nome da inst√¢ncia baseado no nome do estabelecimento
function generateInstanceName(businessName: string | null, tenantId: string): string {
  if (!businessName) {
    // Fallback para o formato antigo se n√£o houver businessName
    return `tenant_${tenantId}`
  }
  
  // Limpar o nome do estabelecimento para usar como nome da inst√¢ncia
  const cleanBusinessName = businessName
    .toLowerCase() // converter para min√∫sculas
    .trim() // remover espa√ßos
    .replace(/[^a-z0-9]/g, '_') // substituir caracteres especiais por underscore
    .replace(/_+/g, '_') // m√∫ltiplos underscores viram um s√≥
    .replace(/^_|_$/g, '') // remover underscores do in√≠cio e fim
    .substring(0, 20) // limitar a 20 caracteres
  
  return `${cleanBusinessName}_${tenantId}`
}

interface AuthUser {
  userId: string
  tenantId: string
  email: string
  role: string
}

function verifyToken(request: NextRequest): AuthUser {
  if (process.env.NODE_ENV === 'development') {
    console.log("--- INICIANDO VERIFICA√á√ÉO DE PERMISS√ÉO (STATUS) ---")
  }
  
  // Tentar obter token do header Authorization
  let token = request.headers.get('authorization')?.replace('Bearer ', '')
  if (process.env.NODE_ENV === 'development') {
    console.log("1. Token do Authorization header:", token ? "‚úÖ Encontrado" : "‚ùå N√£o encontrado")
  }
  
  // Se n√£o tiver no header, tentar obter do cookie
  if (!token) {
    token = request.cookies.get('token')?.value
    if (process.env.NODE_ENV === 'development') {
      console.log("1.1. Token do cookie:", token ? "‚úÖ Encontrado" : "‚ùå N√£o encontrado")
    }
  }
  
  // Se ainda n√£o tiver, tentar obter do header x-auth-token
  if (!token) {
    token = request.headers.get('x-auth-token') || undefined
    if (process.env.NODE_ENV === 'development') {
      console.log("1.2. Token do x-auth-token header:", token ? "‚úÖ Encontrado" : "‚ùå N√£o encontrado")
    }
  }

  if (process.env.NODE_ENV === 'development') {
    console.log("2. Token final obtido:", token ? `‚úÖ ${token.substring(0, 20)}...` : "‚ùå Nenhum token")
  }

  if (!token) {
    if (process.env.NODE_ENV === 'development') {
      console.log("‚ùå ERRO: Token n√£o fornecido")
    }
    throw new Error('Token n√£o fornecido')
  }

  try {
    if (process.env.NODE_ENV === 'development') {
      console.log("3. Tentando decodificar token...")
      console.log("3.1. NEXTAUTH_SECRET existe:", process.env.NEXTAUTH_SECRET ? "‚úÖ Sim" : "‚ùå N√£o")
    }
    
    const decoded = jwt.verify(token, process.env.NEXTAUTH_SECRET || 'fallback-secret') as any
    
    if (process.env.NODE_ENV === 'development') {
      console.log("4. ‚úÖ Token decodificado com sucesso:")
      console.log("4.1. userId:", decoded.userId)
      console.log("4.2. tenantId:", decoded.tenantId) 
      console.log("4.3. email:", decoded.email)
      console.log("4.4. role:", decoded.role)
    }
    
    return {
      userId: decoded.userId,
      tenantId: decoded.tenantId,
      email: decoded.email,
      role: decoded.role
    }
  } catch (error: any) {
    if (process.env.NODE_ENV === 'development') {
      console.error("‚ùå ERRO na valida√ß√£o do token:")
      console.error("5.1. Tipo do erro:", error.name)
      console.error("5.2. Mensagem:", error.message)
      console.error("5.3. Stack:", error.stack)
    }
    throw new Error('Token inv√°lido')
  }
}

export async function GET(
  request: NextRequest,
  { params }: { params: { tenantId: string } }
) {
  try {
    if (process.env.NODE_ENV === 'development') {
      console.log("=== ROTA GET STATUS INICIADA ===")
    }
    
    // Autentica√ß√£o
    if (process.env.NODE_ENV === 'development') {
      console.log("6. Iniciando verifica√ß√£o de token...")
    }
    const user = verifyToken(request)
    if (process.env.NODE_ENV === 'development') {
      console.log("7. ‚úÖ Token verificado com sucesso")
    }
    
    if (process.env.NODE_ENV === 'development') {
      console.log("8. Verificando permiss√£o para tenant...")
      console.log("8.1. Tenant ID da URL:", params.tenantId)
      console.log("8.2. Tenant ID do token:", user.tenantId)
    }
    
    if (!user || user.tenantId !== params.tenantId) {
      if (process.env.NODE_ENV === 'development') {
        console.log("‚ùå ERRO 403: Permiss√£o negada")
        console.log("8.3. User existe:", !!user)
        console.log("8.4. IDs correspondem:", user?.tenantId === params.tenantId)
      }
      return NextResponse.json(
        { error: 'N√£o autorizado' },
        { status: 401 }
      )
    }
    
    console.log("9. ‚úÖ Permiss√£o verificada - usu√°rio autorizado")
    console.log("--- VERIFICA√á√ÉO DE PERMISS√ÉO BEM-SUCEDIDA ---")

    const { tenantId } = params
    
    // Buscar dados do tenant para gerar nome da inst√¢ncia correto
    const tenant = await prisma.tenant.findFirst({
      where: {
        id: tenantId
      },
      select: {
        id: true,
        businessName: true,
        whatsapp_instance_name: true
      }
    })

    if (!tenant) {
      return NextResponse.json(
        { error: 'Tenant n√£o encontrado' },
        { status: 404 }
      )
    }
    
    // Obter instanceName do query param ou gerar baseado no businessName
    const url = new URL(request.url)
    const queryInstanceName = url.searchParams.get('instanceName')
    const instanceName = queryInstanceName || generateInstanceName(tenant.businessName, tenantId)
    
    console.log(`üè¢ [STATUS] Verificando inst√¢ncia: "${instanceName}"`)
    console.log(`üè¢ [STATUS] Baseado em: "${tenant.businessName}" + "${tenantId}"`)
    

    // Verificar vari√°veis de ambiente da Evolution API
    const evolutionURL = process.env.EVOLUTION_API_URL
    const evolutionKey = process.env.EVOLUTION_API_KEY

    if (!evolutionURL || !evolutionKey) {
      return NextResponse.json(
        { error: 'Configura√ß√£o da Evolution API n√£o encontrada' },
        { status: 500 }
      )
    }

    // Verificar status da inst√¢ncia na Evolution API
    const statusUrl = `${evolutionURL}/instance/connectionState/${instanceName}`
    
    console.log(`üîç [API] Verificando status da inst√¢ncia: ${instanceName}`)

    const response = await fetch(statusUrl, {
      method: 'GET',
      headers: {
        'apikey': evolutionKey,
        'Accept': 'application/json'
      },
      signal: AbortSignal.timeout(10000)
    })

    // Tratar diferentes c√≥digos de status HTTP
    if (!response.ok) {
      console.log(`‚ö†Ô∏è [API] Evolution API retornou status: ${response.status}`)
      
      // 404 significa que a inst√¢ncia n√£o existe ou est√° desconectada - isso √© V√ÅLIDO
      if (response.status === 404) {
        console.log('üì¥ [API] Inst√¢ncia n√£o encontrada (404) - interpretando como desconectada')
        return NextResponse.json({
          connected: false,
          instanceName: instanceName,
          status: 'close',
          error: 'Inst√¢ncia n√£o encontrada - WhatsApp desconectado',
          data: {
            tenantId: tenantId,
            instanceName: instanceName,
            lastCheck: new Date().toISOString()
          }
        })
      }
      
      // Para outros erros (500, 401, etc.), retornar erro real
      console.error(`‚ùå [API] Erro inesperado na Evolution API: ${response.status}`)
      const errorText = await response.text().catch(() => 'Erro desconhecido')
      return NextResponse.json(
        { 
          connected: false,
          instanceName: instanceName,
          error: `Erro na Evolution API: ${response.status} - ${errorText}`
        },
        { status: 500 }
      )
    }

    // Se chegou aqui, a resposta foi bem-sucedida (200)
    const data = await response.json()
    console.log('üìã [API] Status da inst√¢ncia obtido com sucesso:', data)
    
    const isConnected = data.instance?.state === 'open' || data.state === 'open'
    
    // Se estiver conectado, atualizar o banco com o instanceName
    if (isConnected) {
      try {
        await prisma.tenant.update({
          where: { id: tenantId },
          data: { 
            whatsapp_instance_name: instanceName 
          }
        })
        console.log(`‚úÖ [API] WhatsApp conectado para tenant ${tenantId} - instanceName salvo no banco`)
      } catch (dbError) {
        console.error('‚ùå [API] Erro ao atualizar banco:', dbError)
      }
    }

    return NextResponse.json({
      connected: isConnected,
      instanceName: instanceName,
      status: data.instance?.state || data.state,
      error: !isConnected ? `Status: ${data.instance?.state || data.state}` : undefined,
      data: {
        tenantId: tenantId,
        instanceName: instanceName,
        lastCheck: new Date().toISOString()
      }
    })

  } catch (error: any) {
    console.error("‚ùå ERRO GERAL na rota GET status:")
    console.error("10.1. Nome do erro:", error.name)
    console.error("10.2. Mensagem:", error.message)
    console.error("10.3. Stack completo:", error.stack)
    
    // Se o erro for de autentica√ß√£o, retornar 401
    if (error.message?.includes('Token n√£o fornecido') || error.message?.includes('Token inv√°lido')) {
      console.log("10.4. ‚ùå Retornando 401 - Erro de autentica√ß√£o")
      return NextResponse.json(
        { 
          error: 'Token de autentica√ß√£o inv√°lido ou expirado',
          details: process.env.NODE_ENV === 'development' ? error?.message : undefined
        },
        { status: 401 }
      )
    }
    
    // Se o erro for de timeout ou rede, tratar como "desconectado" tamb√©m
    if (error.name === 'TimeoutError' || error.message?.includes('timeout') || error.message?.includes('fetch')) {
      console.log("10.5. ‚ö†Ô∏è  Timeout/erro de rede - interpretando como desconectado")
      
      // Buscar businessName para fallback
      let fallbackInstanceName = `tenant_${params.tenantId}` // padr√£o antigo como fallback
      try {
        const fallbackTenant = await prisma.tenant.findFirst({
          where: { id: params.tenantId },
          select: { businessName: true }
        })
        if (fallbackTenant) {
          fallbackInstanceName = generateInstanceName(fallbackTenant.businessName, params.tenantId)
        }
      } catch (e) {
        console.warn('‚ö†Ô∏è  Erro ao buscar tenant para fallback, usando padr√£o antigo')
      }
      
      return NextResponse.json({
        connected: false,
        instanceName: fallbackInstanceName,
        status: 'close',
        error: 'Timeout na comunica√ß√£o com Evolution API - interpretado como desconectado',
        data: {
          tenantId: params.tenantId,
          instanceName: fallbackInstanceName,
          lastCheck: new Date().toISOString()
        }
      })
    }
    
    console.log("10.6. ‚ùå Retornando 500 - Erro interno")
    console.error('‚ùå [API] Erro ao verificar status WhatsApp:', error)
    
    return NextResponse.json(
      { 
        connected: false,
        error: 'Erro interno ao verificar status da conex√£o WhatsApp',
        details: process.env.NODE_ENV === 'development' ? error?.message : undefined
      },
      { status: 500 }
    )
  }
}
